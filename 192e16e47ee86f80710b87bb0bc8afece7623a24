{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b4156a4d_c89910e7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1361710
      },
      "writtenOn": "2023-05-31T09:51:46Z",
      "side": 1,
      "message": "Fixed most things, just have a question about the scope of one your comments. I wouldn\u0027t mind tidying up the source lists further with some guidance, it\u0027s not entirely clear from the outside what is supposed to be \u0027public\u0027 of the older code, webm_parser is a bit tidier.\n\nTangentially; As part of packaging with Conan, I\u0027ve had to tackle building on Windows too unfortunately, and I\u0027m having some problems building it as a shared library (dll). Do you \u0027officially\u0027 support that configuration? Does it work there? The first issue I hit is that the build doesn\u0027t seem to generate a lib file to accompany the dll, indicating that no symbols are being exported. When I force all symbols to be exported with the cmake flag, I do get a lib file generated, but I then undefined symbol errors. Joy.",
      "revId": "192e16e47ee86f80710b87bb0bc8afece7623a24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1792f2f_9721632a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2023-05-31T22:58:41Z",
      "side": 1,
      "message": "\u003e Fixed most things, just have a question about the scope of one your comments. I wouldn\u0027t mind tidying up the source lists further with some guidance, it\u0027s not entirely clear from the outside what is supposed to be \u0027public\u0027 of the older code, webm_parser is a bit tidier.\n\u003e \n\nYes, webm_parser was added later. For mkvparser and mkvmuxer it will require a little bit of digging from the top-level headers.\n\n\u003e Tangentially; As part of packaging with Conan, I\u0027ve had to tackle building on Windows too unfortunately, and I\u0027m having some problems building it as a shared library (dll). Do you \u0027officially\u0027 support that configuration? Does it work there? The first issue I hit is that the build doesn\u0027t seem to generate a lib file to accompany the dll, indicating that no symbols are being exported. When I force all symbols to be exported with the cmake flag, I do get a lib file generated, but I then undefined symbol errors. Joy.\n\nThat isn\u0027t something this project has focused on unfortunately. On Linux all symbols will be exported, but the shared object isn\u0027t versioned properly.",
      "parentUuid": "b4156a4d_c89910e7",
      "revId": "192e16e47ee86f80710b87bb0bc8afece7623a24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ddbb5c0_6fb85f53",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1361710
      },
      "writtenOn": "2023-05-31T23:45:50Z",
      "side": 1,
      "message": "Yeah, it\u0027s possible to add `set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)` to force symbols to be exported on Windows too, which solves that problem for me without affecting any other platform. Would it be OK if I added that to the patch?\n\nWhen combined with the new `ENABLE_SAMPLE_PROGRAMS` option I added to the patch, I\u0027m able to build a functional linkable dll for Windows.\n\nAnother issue I\u0027ve had with the Windows build is where the build forces the library name and extension:\nset_target_properties(webm PROPERTIES PROJECT_LABEL libwebm)\nset_target_properties(webm PROPERTIES PREFIX lib)\n\nConan expects the more usual Windows-like names of `webm.lib` and `webm.dll`, which are the default if you don\u0027t explicitly set those properties. Currently I\u0027m using a patch file as part of the package to workaround this:\nhttps://github.com/conan-io/conan-center-index/pull/17740/files#diff-80ebf119711ad25eb0719f364926224daa9a634fb889bb5f6fe23215c4cba510\n\nI can keep doing that, it\u0027s not a problem, but would you be open to removing it from the build as part of this patch instead? It could be a little controversial since it\u0027s a breaking change, but you mentioned that Windows isn\u0027t well supported anyway.",
      "parentUuid": "d1792f2f_9721632a",
      "revId": "192e16e47ee86f80710b87bb0bc8afece7623a24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b467fd36_f852c3fd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2023-06-01T19:42:48Z",
      "side": 1,
      "message": "\u003e Yeah, it\u0027s possible to add `set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)` to force symbols to be exported on Windows too, which solves that problem for me without affecting any other platform. Would it be OK if I added that to the patch?\n\u003e \n\nLet\u0027s keep each change focused on one thing. As a workaround that would be OK in a follow up change.\n\n\u003e When combined with the new `ENABLE_SAMPLE_PROGRAMS` option I added to the patch, I\u0027m able to build a functional linkable dll for Windows.\n\u003e \n\u003e Another issue I\u0027ve had with the Windows build is where the build forces the library name and extension:\n\u003e set_target_properties(webm PROPERTIES PROJECT_LABEL libwebm)\n\u003e set_target_properties(webm PROPERTIES PREFIX lib)\n\u003e \n\u003e Conan expects the more usual Windows-like names of `webm.lib` and `webm.dll`, which are the default if you don\u0027t explicitly set those properties. Currently I\u0027m using a patch file as part of the package to workaround this:\n\u003e https://github.com/conan-io/conan-center-index/pull/17740/files#diff-80ebf119711ad25eb0719f364926224daa9a634fb889bb5f6fe23215c4cba510\n\u003e \n\u003e I can keep doing that, it\u0027s not a problem, but would you be open to removing it from the build as part of this patch instead? It could be a little controversial since it\u0027s a breaking change, but you mentioned that Windows isn\u0027t well supported anyway.\n\nMaking this change in a separate patch would be fine. We had some discussion of this in libaom [1] and libwebp [2]. Here I expect the target is used less frequently so a breaking change should be fine.\n\n[1]: https://aomedia-review.googlesource.com/c/aom/+/173603\n[2]: https://chromium-review.googlesource.com/c/webm/libwebp/+/3780645",
      "parentUuid": "8ddbb5c0_6fb85f53",
      "revId": "192e16e47ee86f80710b87bb0bc8afece7623a24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa89ed99_09bd6d15",
        "filename": "CMakeLists.txt",
        "patchSetId": 2
      },
      "lineNbr": 326,
      "author": {
        "id": 1361710
      },
      "writtenOn": "2023-05-31T09:55:32Z",
      "side": 1,
      "message": "I\u0027ll rename this to `webvtt_common_headers` in my next push to avoid confusion around what \u0027public\u0027 means as these are not installed now.",
      "revId": "192e16e47ee86f80710b87bb0bc8afece7623a24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b38b337f_e3fe2675",
        "filename": "CMakeLists.txt",
        "patchSetId": 2
      },
      "lineNbr": 326,
      "author": {
        "id": 1361710
      },
      "writtenOn": "2023-05-31T14:23:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa89ed99_09bd6d15",
      "revId": "192e16e47ee86f80710b87bb0bc8afece7623a24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}