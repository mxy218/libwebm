{
  "comments": [
    {
      "key": {
        "uuid": "AAAAHn//mbA\u003d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2012-02-24T19:42:19Z",
      "side": 1,
      "message": "constructor",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mQE\u003d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1002833
      },
      "writtenOn": "2012-02-25T02:43:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAAAHn//mbA\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mcI\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5428,
      "author": {
        "id": 1002431
      },
      "writtenOn": "2012-02-24T19:16:13Z",
      "side": 1,
      "message": "Should this be initialized? I guess the real question is: can pCluster-\u003eGetNext return non-error status without setting pNextEntry?",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mac\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5428,
      "author": {
        "id": 1002833
      },
      "writtenOn": "2012-02-25T02:43:52Z",
      "side": 1,
      "message": "Ptrs returned as out params are always set to NULL, even when the function return value indicates error.",
      "parentUuid": "AAAAHn//mcI\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mak\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5482,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2012-02-24T19:42:19Z",
      "side": 1,
      "message": "has this condition been checked previously elsewhere?",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mPY\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5482,
      "author": {
        "id": 1002833
      },
      "writtenOn": "2012-02-25T02:43:52Z",
      "side": 1,
      "message": "A \"block entry\" is the abstract superclass of SimpleBlock elements and BlockGroup elements.  Each of those concrete subclasses contains a Block object as a member variable, so this cannot fail.  The assert is just there to catch an error introduced in some future patch.",
      "parentUuid": "AAAAHn//mak\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mbs\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7626,
      "author": {
        "id": 1002431
      },
      "writtenOn": "2012-02-24T19:16:13Z",
      "side": 1,
      "message": "Init value?",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//maU\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7626,
      "author": {
        "id": 1002833
      },
      "writtenOn": "2012-02-25T02:43:52Z",
      "side": 1,
      "message": "As above, pEntry is set to NULL if status indicates error.",
      "parentUuid": "AAAAHn//mbs\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mbk\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7643,
      "author": {
        "id": 1002431
      },
      "writtenOn": "2012-02-24T19:16:13Z",
      "side": 1,
      "message": "Ditto...",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//maM\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7643,
      "author": {
        "id": 1002833
      },
      "writtenOn": "2012-02-25T02:43:52Z",
      "side": 1,
      "message": "pEntry is set to NULL if status indicates error.",
      "parentUuid": "AAAAHn//mbk\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mbg\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7799,
      "author": {
        "id": 1002431
      },
      "writtenOn": "2012-02-24T19:16:13Z",
      "side": 1,
      "message": "NDEBUG/ if (!pEntry) return -1 ?",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//maI\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7799,
      "author": {
        "id": 1002833
      },
      "writtenOn": "2012-02-25T02:43:52Z",
      "side": 1,
      "message": "OK I can fix this, by using std::nothrow.",
      "parentUuid": "AAAAHn//mbg\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mZY\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7821,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2012-02-24T19:42:19Z",
      "side": 1,
      "message": "the fact that this is a const member function is suspicious given the modification of m_entries.",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mOg\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7821,
      "author": {
        "id": 1002833
      },
      "writtenOn": "2012-02-25T02:43:52Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "AAAAHn//mZY\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mbc\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7877,
      "author": {
        "id": 1002431
      },
      "writtenOn": "2012-02-24T19:16:13Z",
      "side": 1,
      "message": "NDEBUG/ if (!m_entries) return -1 ?",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//maE\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7877,
      "author": {
        "id": 1002833
      },
      "writtenOn": "2012-02-25T02:43:52Z",
      "side": 1,
      "message": "This would indicate a bug in the algorithm.  This really needs to be an assert!",
      "parentUuid": "AAAAHn//mbc\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//lr4\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7877,
      "author": {
        "id": 1002431
      },
      "writtenOn": "2012-02-25T02:54:11Z",
      "side": 1,
      "message": "It still silently fails in release mode when m_entries is NULL-- I don\u0027t think the cause really matters. We could remove NDEBUG from builds if that\u0027s what you\u0027d prefer.",
      "parentUuid": "AAAAHn//maE\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//loM\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7877,
      "author": {
        "id": 1002833
      },
      "writtenOn": "2012-02-25T04:06:27Z",
      "side": 1,
      "message": "m_entries cannot be NULL.",
      "parentUuid": "AAAAHn//lr4\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mbM\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7915,
      "author": {
        "id": 1002431
      },
      "writtenOn": "2012-02-24T19:16:13Z",
      "side": 1,
      "message": "NDEBUG/ditto",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mZ8\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7915,
      "author": {
        "id": 1002833
      },
      "writtenOn": "2012-02-25T02:43:52Z",
      "side": 1,
      "message": "This would be a bug in the algorith, so an assert is appropriate.",
      "parentUuid": "AAAAHn//mbM\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mbE\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7932,
      "author": {
        "id": 1002431
      },
      "writtenOn": "2012-02-24T19:16:13Z",
      "side": 1,
      "message": "If the asserts are truly failure conditions they need matching if\u0027s w/negated conditions. Otherwise: let\u0027s get rid of them.",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mZ4\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7932,
      "author": {
        "id": 1002833
      },
      "writtenOn": "2012-02-25T02:43:52Z",
      "side": 1,
      "message": "These are true asserts, not tests for failure conditions.",
      "parentUuid": "AAAAHn//mbE\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//lr0\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7932,
      "author": {
        "id": 1002431
      },
      "writtenOn": "2012-02-25T02:54:11Z",
      "side": 1,
      "message": "If the library is capable of knowing that it\u0027s in a bad state, it should return failure status to users. The asserts imply that this is possible-- our release builds define NDEBUG, which masks bad state and potentially makes bugs (whether in the library or belonging to the user) more difficult to find. The negated conditions should be added so that NDEBUG builds have the opportunity to fail gracefully.",
      "parentUuid": "AAAAHn//mZ4\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//loI\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 7932,
      "author": {
        "id": 1002833
      },
      "writtenOn": "2012-02-25T04:06:27Z",
      "side": 1,
      "message": "The asserts imply no such thing (here, anyway).\n\npCurr is an element of m_entries.  If pCurr is non-NULL, then m_entries must also be NULL.",
      "parentUuid": "AAAAHn//lr0\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mY4\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 8644,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2012-02-24T19:42:19Z",
      "side": 1,
      "message": "\u003c\u003d ? or was the assert incorrect?",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mN8\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 8644,
      "author": {
        "id": 1002833
      },
      "writtenOn": "2012-02-25T02:43:52Z",
      "side": 1,
      "message": "I liberalized the parser, to allow 0-length frames.  The OP was using this parser with an MPEG4 codec for the video track, so that made me realize that this parser should not make assumptions about payload values.  It might be the case that it\u0027s perfectly legal for a frame to have a 0 length, so this parser should allow that.  If a 0-length frame is not legal, the client can deal with that as he sees fit.",
      "parentUuid": "AAAAHn//mY4\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mYk\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 8649,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2012-02-24T19:42:19Z",
      "side": 1,
      "message": "LONG_MAX \u003d 9223372036854775807L when word size is 64 bits so I think this check is incorrect given the type range in the format.",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mN0\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 8649,
      "author": {
        "id": 1002833
      },
      "writtenOn": "2012-02-25T02:43:52Z",
      "side": 1,
      "message": "But that check is there because of the following line: f.len uses type long.",
      "parentUuid": "AAAAHn//mYk\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//lrw\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 8649,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2012-02-25T02:53:41Z",
      "side": 1,
      "message": "True. I was concerned though that it would exceed the max defined for matroska (2^56-2) in that case",
      "parentUuid": "AAAAHn//mN0\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//lns\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 8649,
      "author": {
        "id": 1002833
      },
      "writtenOn": "2012-02-25T04:06:27Z",
      "side": 1,
      "message": "This is an interesting corner-case.  The size of the last frame in the block is implied: it is calculated as the difference between the sum of all the previous frames (which are specified a MKV UInt types), and the total size of the block.\n\nThis block size is specified as an MKV UInt, so total_size is going to be limited to that max anyway, and thus the predicate could never be true.  (Geez, maybe I should put the assert back in... ha ha).",
      "parentUuid": "AAAAHn//lrw\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mW4\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 8797,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2012-02-24T19:42:19Z",
      "side": 1,
      "message": "\u003c\u003d?",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAHn//mNs\u003d",
        "filename": "mkvparser.cpp",
        "patchSetId": 2
      },
      "lineNbr": 8797,
      "author": {
        "id": 1002833
      },
      "writtenOn": "2012-02-25T02:43:52Z",
      "side": 1,
      "message": "As above, the parser now permits a frame to have 0 length.  It\u0027s up to the client to determine whether this makes sense for his codec type.",
      "parentUuid": "AAAAHn//mW4\u003d",
      "revId": "47a047b4362ddcc40e55ad2f3cd281b01cfa214f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}